<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nodeclashv2ray.github.io/news/article-38026.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Lambda8 表达式</title>
        <meta name="description" content="Lambda 表达式 Lambda 表达式是 JDK8 的一个新特性，可以取代大部分的匿名内部类，写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。 JDK 也提" />
        <link rel="icon" href="/assets/website/img/nodeclashv2ray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="NodeClashV2ray节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nodeclashv2ray.github.io/news/article-38026.htm" />
    <meta property="og:site_name" content="NodeClashV2ray节点订阅站" />
    <meta property="og:title" content="Lambda8 表达式" />
    <meta property="og:image" content="https://nodeclashv2ray.github.io/uploads/20240509/e593eb6fd5365c2c99de8d7f1709f6ec.webp" />
        <meta property="og:release_date" content="2025-01-09T05:59:31" />
    <meta property="og:updated_time" content="2025-01-09T05:59:31" />
        <meta property="og:description" content="Lambda 表达式 Lambda 表达式是 JDK8 的一个新特性，可以取代大部分的匿名内部类，写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。 JDK 也提" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Place favicon.ico in the root directory -->
    <!-- All css files are included here. -->

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Lambda8 表达式">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap fremwork main css -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/bootstrap.min.css">
    <!-- This core.css file contents all plugings css file. -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/core.css">
    <!-- Theme shortcodes/elements style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/shortcode/shortcodes.css">
    <!-- Theme main style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/style.css">
    <!-- Responsive css -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/responsive.css">
    <!-- Style customizer (Remove these two lines please) -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/style-customizer.css">
    <!-- User style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/custom.css">
    <!-- Modernizr JS -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/vendor/modernizr-2.8.3.min.js"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-BKWDB6T1Z4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-BKWDB6T1Z4');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lt IE 8]>
        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
    <![endif]-->
    <!-- Body main wrapper start -->
    <div class="wrapper">
        <!-- Start of Header Top Area -->
        <header id="header-content">
            <!-- Start of mainmenu area -->
            <div id="sticky-header-with-topbar" class="header-bottom-area bg-white height-100  transparent-header hidden-xs">
                <div class="container">
                    <div class="row">
                        <div class="col-md-5 col-sm-12">
                            <div class="logo f-left sm-center">
                                                                <a href="/">Node Clash V2ray</a>
                                                            </div>
                        </div>
                        <div class="col-md-7 col-sm-12">
                            <div class="mainmenu-container">
                                <ul class="main-menu">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                        <li><a href="#">关于</a></li>
                                    <li><a href="#">联系</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Mobile-menu-area start -->
            <div class="mobile-menu-area hidden-md hidden-lg hidden-sm">
                <div class="fluid-container mobile-menu-container">
                    <div class="mobile-logo">
                                                <a href="/">Node Clash V2ray</a>
                                            </div>
                    <div class="mobile-menu clearfix">
                        <nav id="mobile_dropdown">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                <li><a href="#">关于</a></li>
                                <li><a href="#">联系</a></li>
                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
            <!-- Mobile-menu-area end -->
        </header>
<!-- End of Header Top Area -->
        <!-- Start Bradcaump area -->
        <div class="tf-bradcaump-area sbg-3" data-black-overlay="8">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12">
                        <div class="bradcaump-wrap text-center">
                            <h1 class="bradcaump-title">Lambda8 表达式</h1>
                            <nav class="bradcaump-inner">
                                <a class="breadcrumb-item" href="/">首页</a>
                                <span class="brd-separetor">/</span>
                                <a class="breadcrumb-item" href="/news/">新闻资讯</a>
                                <span class="brd-separetor">/</span>
                                <span class="breadcrumb-item active">正文</span>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Bradcaump area -->
        <section id="tf-about-container" class="tf-about-area ptb-100 bg-gray xtb-60">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<h2 id="lambda-表达式">Lambda 表达式</h2> <p>Lambda 表达式是 JDK8 的一个新特性，可以取代大部分的匿名内部类，写出更优雅的 Java 代码，尤其在集合的遍历和其他集合操作中，可以极大地优化代码结构。<br /> JDK 也提供了大量的内置函数式接口供我们使用，使得 Lambda 表达式的运用更加方便、高效。</p> <p>可以对某些匿名内部类的写法进行简化，它是函数式编程思想的一个重要体现，不用关注是什么对象，而是更关注对数据进行了什么操作。</p> <h3 id="基本格式">基本格式</h3> <pre><code class="language-markdown">(参数列表)-&gt;{代码}</code></pre> <h3 id="范例">范例</h3> <h4 id="范例一">范例一：</h4> <p><strong>在创建线程并启动时可以使用匿名内部类的写法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">new Thread(new Runnable() {     @Override     public void run() {         System.out.println(Thread.currentThread());     } }).start();</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">new Thread(() -&gt; {     System.out.println(Thread.currentThread()); }).start();</code></pre> <h4 id="范例二">范例二：</h4> <p><strong>IntBinaryOperator是一个接口，使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static int calculateNum(IntBinaryOperator operator) {     int a = 10;     int b = 20;     return operator.applyAsInt(a, b); }  @Test public void testLambda2() {     int i = calculateNum(new IntBinaryOperator() {         @Override         public int applyAsInt(int left, int right) {             return left + right;         }     });      System.out.println(i); }</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static int calculateNum(IntBinaryOperator operator) {     int a = 10;     int b = 20;     return operator.applyAsInt(a, b); }  @Test public void testLambda2() {     int i = calculateNum((int left, int right) -&gt; {         return left + right;     });      System.out.println(i); }</code></pre> <h4 id="范例三">范例三：</h4> <p><strong>IntPredicate是一个接口。先使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static void printNum(IntPredicate predicate) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         if (predicate.test(i)) {             System.out.println(i);         }     } }  @Test public void testLambda3() {     printNum(new IntPredicate() {         @Override         public boolean test(int value) {             return value % 3 == 0;         }     }); }</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static void printNum(IntPredicate predicate) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         if (predicate.test(i)) {             System.out.println(i);         }     } }  @Test public void testLambda3() {     printNum((int value) -&gt; {         return value % 3 == 0;     }); }</code></pre> <h4 id="范例四">范例四：</h4> <p><strong>Function是一个接口，先使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static &lt;R&gt; R typeConver(Function&lt;String, R&gt; function) {     String str = "1235";     R result = function.apply(str);     return result; }  @Test public void testLambda4() {     Integer result = typeConver(new Function&lt;String, Integer&gt;() {         @Override         public Integer apply(String s) {             return Integer.valueOf(s);         }     });     System.out.println(result); }</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static &lt;R&gt; R typeConver(Function&lt;String, R&gt; function) {     String str = "1235";     R result = function.apply(str);     return result; }  @Test public void testLambda4() {     Integer result = typeConver((String s) -&gt; {         return Integer.valueOf(s);     });     System.out.println(result); }</code></pre> <h4 id="范例五">范例五：</h4> <p><strong>IntConsumer是一个接口，先使用匿名内部类的写法调用该方法；</strong></p> <ul> <li>匿名内部类方式：</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr(new IntConsumer() {         @Override         public void accept(int value) {             System.out.println(value);         }     });</code></pre> <ul> <li>Lambda方式：</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr((int value) -&gt; {         System.out.println(value);     }); }</code></pre> <h3 id="省略规则">省略规则</h3> <ul> <li>参数类型可以省略；</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr((value) -&gt; {         System.out.println(value);     }); }</code></pre> <ul> <li>方法体只有一句代码时大括号return和唯一一句代码的分号可以省略；</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr((value) -&gt; System.out.println(value)); }</code></pre> <ul> <li>方法只有一个参数时小括号可以省略；</li> </ul> <pre><code class="language-java">public static void foreachArr(IntConsumer consumer) {     int[] arr = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};     for (int i : arr) {         consumer.accept(i);     } }  @Test public void testLambda5() {     foreachArr(value -&gt; System.out.println(value)); }</code></pre> <ul> <li>以上这些规则都记不住也可以省略不记，可通过idea的replaceLambda表达式快速生成lambda表达式；</li> </ul> <h2 id="stream-流">Stream 流</h2> <p>Stream将要处理的元素集合看作一种流，在流的过程中，借助Stream API对流中的元素进行操作。</p> <h3 id="stream---特性">Stream - 特性</h3> <p>Stream可以由数组或集合创建，对流的操作分为两种：</p> <ul> <li>中间操作，每次返回一个新的流，可以有多个；</li> <li>终端操作，每个流只能进行一次终端操作，终端操作结束后流无法再次使用。终端操作会产生一个新的集合或值。</li> </ul> <p>Stream特性：</p> <ul> <li> <p>stream不存储数据，而是按照特定的规则对数据进行计算，一般会输出结果；</p> </li> <li> <p>stream不会改变数据源，通常情况下会产生一个新的集合或一个值；</p> </li> <li> <p>stream具有延迟执行特性，只有调用终端操作时，中间操作才会执行。</p> </li> </ul> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e98245ba7034202f40ea79585ea56cfb.jpg" alt="Lambda8 表达式"></p> <h3 id="stream---创建方式">Stream - 创建方式</h3> <p>Stream创建方式有三种：</p> <ul> <li> <p>通过 java.util.Collection.stream() 方法用集合创建流；</p> </li> <li> <p>使用java.util.Arrays.stream(T[] array)方法用数组创建流；</p> </li> <li> <p>使用Stream的静态方法：of()、iterate()、generate()。</p> </li> </ul> <pre><code class="language-java">import java.util.Arrays; import java.util.List; import java.util.concurrent.atomic.AtomicInteger; import java.util.stream.Collectors; import java.util.stream.IntStream; import java.util.stream.Stream;  /**  * @author hos  * @Createdate 2022/3/21 14:40  */ public class StreamCreateType {      public static void main(String[] args) {          /**          * Stream 流的创建有3种方式          *  1. Collection.stream（）方法用集合创建          *  2. Arrays.stream(T[] array) 方法用数组创建          *  3. 使用Stream的静态方法：of()、iterate()、generate()          */         //方式一: Collection.stream（）方法用集合创建         List&lt;String&gt; list = Arrays.asList("1", "2", "3", "4", "5", "6", "7", "8", "9");         // 创建一个顺序流         Stream&lt;String&gt; stream = list.stream();         // 创建一个并行流         Stream&lt;String&gt; stringStream = list.parallelStream();         List&lt;String&gt; collect = stringStream.collect(Collectors.toList());          //方式二: Arrays.stream(T[] array) 方法用数组创建         int[] array = {1, 2, 3, 4, 5};         IntStream stream1 = Arrays.stream(array);         System.out.println(stream1.max().getAsInt());           //方式三: 使用Stream的静态方法：of()、iterate()、generate()         Stream&lt;Integer&gt; intStream = Stream.of(1, 2, 3, 4, 5, 6);         Stream&lt;Integer&gt; stream2 = Stream.iterate(0, (x) -&gt; x + 3).limit(4);         // 0 3 6 9         stream2.forEach(System.out::println);          AtomicInteger m = new AtomicInteger(10);         Stream&lt;Integer&gt; stream3 = Stream.generate(()-&gt; m.getAndIncrement()).limit(3);         //10 11 12         stream3.forEach(System.out::println);     } }</code></pre> <h3 id="stream---使用">Stream - 使用</h3> <h4 id="中间操作">中间操作</h4> <h5 id="map">map</h5> <p>map，可以将一个流的元素按照一定的映射规则映射到另一个流中；</p> <p>map，接收一个函数作为参数，该函数会被应用到每个元素上，并将其映射成一个新的元素。</p> <h5 id="filter">filter</h5> <p>filter，对流中的元素进行条件过滤，符合过滤条件的才能继续留在流中；</p> <p>filter，按照一定的规则校验流中的元素，将符合条件的元素提取到新的流中的操作。</p> <h5 id="distinct">distinct</h5> <p>distinct，去除流中的重复元素；</p> <h5 id="sorted">sorted</h5> <p>sorted()，自然排序，流中元素需实现Comparable接口；</p> <p>sorted(Comparator com)，Comparator排序器自定义排序。</p> <h5 id="limit">limit</h5> <p>limit，可以设置流的最大长度，超出的部分将被抛弃；</p> <h5 id="skip">skip</h5> <p>skip，跳过流中的前n个元素，返回剩下的元素；</p> <h5 id="flatmap">flatMap</h5> <p>flatMap，接收一个函数作为参数，将流中的每个值都换成另一个流，然后把所有流连接成一个流；</p> <p>map只能把一个对象转换成另一个对象来作为流中的元素。而flatMap可以把一个对象转换成多个对象作为流中的元素。</p> <h4 id="终结操作">终结操作</h4> <h5 id="foreach">forEach</h5> <p>forEach方法，通过 lambda 表达式的方式遍历集合中的元素；</p> <p>forEach，对流中的元素进行遍历操作，通过传入的参数去指定对遍历到的元素进行什么具体操作。</p> <h5 id="count">count</h5> <p>count，用来获取当前流中元素的个数；</p> <h5 id="maxmin">max&amp;min</h5> <p>max&amp;min，可以用来或者流中的最值。</p> <h5 id="collect">collect</h5> <p>collect，把当前流转换成一个集合；</p> <p>collect，把一个流收集起来，最终可以是收集成一个值也可以收集成一个新的集合；流不存储数据，那么在流中的数据完成处理后，需要将流中的数据重新归集到新的集合里。</p> <h5 id="reduce">reduce</h5> <p>reduce，把一个流缩减成一个值，能实现对集合求和、求乘积和求最值操作；</p> <p>reduce，对流中的数据按照你指定的计算方式计算出一个结果。</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-37565.htm">什么样的狗粮才是好狗粮（什么样的狗粮性价比高）</a></p>
                                        <p>下一个：<a href="/news/article-38028.htm">kubernetes实现分布式限流_云和虚拟化_</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h3 class="panel-title">热门文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                                    <li class="py-2"><a href="/free-nodes/2024-5-8-clash-v2ray-ss-ssr.htm" title="5月8日|最高速度22.5M/S，2024最新Shadowrocket/Clash/SSR/V2ray免费节点高速订阅链接">5月8日|最高速度22.5M/S，2024最新Shadowrocket/Clash/SSR/V2ray免费节点高速订阅链接</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
                <!-- Start of Footer Area -->
        <footer id="footer" class="footer-area footer-bg">
            <div class="footer-bottom-area">
                <div class="container">
                    <div class="row">
                        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                            <div class="copy-right-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                NodeClashV2ray节点订阅站 版权所有 Powered by WordPress
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!--End of Footer Area -->
    </div>
    <!-- Body main wrapper end -->
    <!-- Placed js at the end of the document so the pages load faster -->
    <!-- jquery latest version -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/vendor/jquery-1.12.0.min.js"></script>
    <!-- Bootstrap framework js -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/bootstrap.min.js"></script>
    <!-- Owl Carousel framework js -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/owl.carousel.min.js"></script>
    <!-- All js plugins included in this file. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/plugins.js"></script>
    <!-- Slick min.js. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/slick.min.js"></script>
    <!-- Waypoints.min.js. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/waypoints.min.js"></script>
    <!-- Main js file that contents all jQuery plugins activation. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>