<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nodeclashv2ray.github.io/news/article-79712.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>.NET Core(.NET6)中gRPC使用</title>
        <meta name="description" content="简单解析一下gRPC，gRPC 是一个由Google开源的，跨语言的，高性能的远程过程调用（RPC）框架。 特点：  跨语言 内容protobuf格式（比json体积小）,网络传输快 使用HTTP/2" />
        <link rel="icon" href="/assets/website/img/nodeclashv2ray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="NodeClashV2ray节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nodeclashv2ray.github.io/news/article-79712.htm" />
    <meta property="og:site_name" content="NodeClashV2ray节点订阅站" />
    <meta property="og:title" content=".NET Core(.NET6)中gRPC使用" />
    <meta property="og:image" content="https://nodeclashv2ray.github.io/uploads/20240509/6a0ce0f63f737da45c53e6813e6fac13.webp" />
        <meta property="og:release_date" content="2025-03-23T08:23:20" />
    <meta property="og:updated_time" content="2025-03-23T08:23:20" />
        <meta property="og:description" content="简单解析一下gRPC，gRPC 是一个由Google开源的，跨语言的，高性能的远程过程调用（RPC）框架。 特点：  跨语言 内容protobuf格式（比json体积小）,网络传输快 使用HTTP/2" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Place favicon.ico in the root directory -->
    <!-- All css files are included here. -->

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content=".NET Core(.NET6)中gRPC使用">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap fremwork main css -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/bootstrap.min.css">
    <!-- This core.css file contents all plugings css file. -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/core.css">
    <!-- Theme shortcodes/elements style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/shortcode/shortcodes.css">
    <!-- Theme main style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/style.css">
    <!-- Responsive css -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/responsive.css">
    <!-- Style customizer (Remove these two lines please) -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/style-customizer.css">
    <!-- User style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/custom.css">
    <!-- Modernizr JS -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/vendor/modernizr-2.8.3.min.js"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-BKWDB6T1Z4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-BKWDB6T1Z4');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lt IE 8]>
        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
    <![endif]-->
    <!-- Body main wrapper start -->
    <div class="wrapper">
        <!-- Start of Header Top Area -->
        <header id="header-content">
            <!-- Start of mainmenu area -->
            <div id="sticky-header-with-topbar" class="header-bottom-area bg-white height-100  transparent-header hidden-xs">
                <div class="container">
                    <div class="row">
                        <div class="col-md-5 col-sm-12">
                            <div class="logo f-left sm-center">
                                <a href="/">
                                                                <span>Node Clash V2ray</span>
                                                                </a>
                            </div>
                        </div>
                        <div class="col-md-7 col-sm-12">
                            <div class="mainmenu-container">
                                <ul class="main-menu">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                    </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Mobile-menu-area start -->
            <div class="mobile-menu-area hidden-md hidden-lg hidden-sm">
                <div class="fluid-container mobile-menu-container">
                    <div class="mobile-logo">
                                                <a href="/">Node Clash V2ray</a>
                                            </div>
                    <div class="mobile-menu clearfix">
                        <nav id="mobile_dropdown">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                <li><a href="/client.htm">客户端</a></li>
                                                                <li><a href="/news/">新闻资讯</a></li>
                                                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
            <!-- Mobile-menu-area end -->
        </header>
<!-- End of Header Top Area -->
        <!-- Start Bradcaump area -->
        <div class="tf-bradcaump-area sbg-3" data-black-overlay="8">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12">
                        <div class="bradcaump-wrap text-center">
                            <h1 class="bradcaump-title">.NET Core(.NET6)中gRPC使用</h1>
                            <nav class="bradcaump-inner">
                                <a class="breadcrumb-item" href="/">首页</a>
                                <span class="brd-separetor">/</span>
                                <a class="breadcrumb-item" href="/news/">新闻资讯</a>
                                <span class="brd-separetor">/</span>
                                <span class="breadcrumb-item active">正文</span>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Bradcaump area -->
        <section id="tf-about-container" class="tf-about-area ptb-100 bg-gray xtb-60">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				</h1> <p>简单解析一下gRPC，gRPC 是一个由Google开源的，跨语言的，高性能的远程过程调用（RPC）框架。</p> <p>特点：</p> <ul> <li>跨语言</li> <li>内容protobuf格式（比json体积小）,网络传输快</li> <li>使用HTTP/2进行传输</li> </ul> <p>适合高性能轻量的微服务，一般对外的接口用restful api，内部服务的调用用gRPC。gRPC是一个分布式服务框架，和以前的WebService，WCF类似。</p> </h1> <h2>1.创建gRPC项目</h2> <p>新建一个gRPC模板的项目</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f63aacfe1a7c2b43fb14cbd2b62188ad.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b23cf2a6bc2768016ffa80482204147b.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/a3bcd94291b411c77e5feb3c6251a4ec.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;特别的地方就这里4点。</p> <p>1.基于http2来通信。</p> <p>2.proto协议文件，greet.proto是项目默认给我们的一个hello world的示例。它会根据协议自动生成需要的类。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/1c9d1382fad6ce5e68be2b648d4613c7.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>3.服务类，Greeter.GreeterBase来自于2中的proto文件自动生成的类，生成的类在\obj\Debug\net6.0\Protos 目录下。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/7f8cdf8790e2e064546976c43a226bdf.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;自动生成的类：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/2832054773a0cd7ca782c9bdfc818d33.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;4.Program.cs添加了gRPC服务，和把GreeterService注册到管道中。</p> <h2>2.编写自己的服务</h2> <p>怎么样写自己的调用服务呢？</p> <p><strong>&nbsp;1.创建proto文件</strong></p> <p>参照上面的示例创建自己的Proto文件</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6f11c112e1793c0fb609e127041d46ab.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;代码:</p> <div class="cnblogs_code"> <pre>syntax =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">proto3</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;  option csharp_namespace</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">GrpcDemo.Service</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;  package order;</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 订单服务定义</span><span style="color: rgba(0, 0, 0, 1)">service Order {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> 创建订单</span><span style="color: rgba(0, 0, 0, 1)">  rpc CreateOrder (CreateRequest) returns (CreateResult);</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查询订单</span><span style="color: rgba(0, 0, 0, 1)">  rpc QueryOrder (QueryRequest) returns (QueryResult); }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建订单请求参数</span><span style="color: rgba(0, 0, 0, 1)">message CreateRequest {</span><span style="color: rgba(0, 0, 255, 1)">string</span> orderNo =<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">string</span> orderName=<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">double</span> price=<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">创建订单返回结果</span><span style="color: rgba(0, 0, 0, 1)">message CreateResult {</span><span style="color: rgba(0, 0, 255, 1)">bool</span> result =<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">string</span> message=<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查询订单请求参数</span><span style="color: rgba(0, 0, 0, 1)">message QueryRequest{</span><span style="color: rgba(0, 0, 255, 1)">int</span> id=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">; }</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查询订单返回结果</span><span style="color: rgba(0, 0, 0, 1)">message QueryResult{</span><span style="color: rgba(0, 0, 255, 1)">int</span> id=<span style="color: rgba(128, 0, 128, 1)">1</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">string</span> orderNo=<span style="color: rgba(128, 0, 128, 1)">2</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">string</span> orderName=<span style="color: rgba(128, 0, 128, 1)">3</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">double</span> price=<span style="color: rgba(128, 0, 128, 1)">4</span><span style="color: rgba(0, 0, 0, 1)">; }</span></pre> </div> <p>生成一下就能看到对应的类已经生成了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/e6e42cc34e5712073d806c36476f6f8d.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p><strong>&nbsp;2.实现定义的服务</strong></p> <p>&nbsp;创建OrderService.cs</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderService:Order.OrderBase     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> ILogger&lt;GreeterService&gt;<span style="color: rgba(0, 0, 0, 1)"> _logger;</span><span style="color: rgba(0, 0, 255, 1)">public</span> OrderService(ILogger&lt;GreeterService&gt;<span style="color: rgba(0, 0, 0, 1)"> logger)         {             _logger</span>=<span style="color: rgba(0, 0, 0, 1)"> logger;         }</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 创建订单</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="request"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="context"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;&lt;/returns&gt;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span> Task&lt;CreateResult&gt;<span style="color: rgba(0, 0, 0, 1)"> CreateOrder(CreateRequest request, ServerCallContext context)         {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">报存数据库 todo</span><span style="color: rgba(0, 0, 255, 1)">return</span> Task.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> CreateResult             {                 Result</span>=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,                 Message</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">订单创建成功</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">             });         }</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 查询订单</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="request"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="context"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;&lt;/returns&gt;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span> Task&lt;QueryResult&gt;<span style="color: rgba(0, 0, 0, 1)"> QueryOrder(QueryRequest request, ServerCallContext context)         {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查询数据库</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">todo</span><span style="color: rgba(0, 0, 255, 1)">return</span> Task.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> QueryResult             {                 OrderInfo</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OrderInfo                 {                     Id</span>=<span style="color: rgba(0, 0, 0, 1)"> request.Id,                     OrderNo</span>= DateTime.Now.ToString(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yyyyMMddHHmmss</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),                     OrderName</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">冰箱</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,                     Price</span>=<span style="color: rgba(128, 0, 128, 1)">1288</span><span style="color: rgba(0, 0, 0, 1)">                 }             });         }     }</span></pre> </div> <p>继承的Order.OrderBase 是上面的proto文件生成的，然后实现了proto里面定义的两个服务。</p> <p>然后在program.cs里面把服务注入管道。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/f7cd7cfd4d794a687c0a471297eef2c6.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;到这里服务端就完成了，就可以启动服务端了。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/90bc1ddb6b14647c8068c3d7b130e906.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;浏览器访问不了，要通过gRPC客户端才能访问，下面就建一个gRPC客户端。</p> </h1> <h2>1.创建客户端项目</h2> <p>1.1、这里创建一个控制台程序。</p> <p>1.2、然后添加Nuget包</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 0, 1)">Google.Protobuf Grpc.Net.Client Grpc.Tools<br/>Grpc.Net.clientFactory<br/></span></pre> </div> <p>1.3、把服务端的proto文件拷贝过来</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/8894ee305e4f8182b2855bd30f9aab50.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;1.4、编辑项目文件，把proto里面的内容替换掉，默认是服务端的配置</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b3eaca616267d64508c2770b9f6685ea.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <div class="cnblogs_code"> <pre>  &lt;Protobuf Include=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Protos\greet.proto</span><span style="color: rgba(128, 0, 0, 1)">"</span> GrpcServices=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Client</span><span style="color: rgba(128, 0, 0, 1)">"</span> /&gt;       &lt;Protobuf Include=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Protos\order.proto</span><span style="color: rgba(128, 0, 0, 1)">"</span> GrpcServices=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Client</span><span style="color: rgba(128, 0, 0, 1)">"</span> /&gt;</pre> </div> <p>生成的时候，客户端也生成了对应proto的类</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/dbc2ce88fc5401686e8aa3fd07ae235d.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <h2>2.grPC服务https的调用</h2> <p>因为服务端提供了http和https的端口，这里先调用https的</p> <p>创建GrpcRequestTest.cs类</p> <div class="cnblogs_code"> <pre><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> gRPC请求测试</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> GrpcRequestTest     {</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> CreateOrder()         {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">常规使用，https</span><span style="color: rgba(0, 0, 255, 1)">string</span> url =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">https://localhost:7246</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">using</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> channel=<span style="color: rgba(0, 0, 0, 1)">GrpcChannel.ForAddress(url))             {</span><span style="color: rgba(0, 0, 255, 1)">var</span> client =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Order.OrderClient(channel);</span><span style="color: rgba(0, 0, 255, 1)">var</span> reply = client.CreateOrder(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> CreateRequest()                 {                     OrderNo</span>= DateTime.Now.ToString(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yyyMMddHHmmss</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),                     OrderName</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">冰箱22款</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,                     Price</span>=<span style="color: rgba(128, 0, 128, 1)">1688</span><span style="color: rgba(0, 0, 0, 1)">                 });                  Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">结果:{reply.Result},message:{reply.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             }             Console.ReadKey();         }     }</span></pre> </div> <p>结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/995707dfde538cccafe1197356754882.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <h2>3.gRPC内网http调用</h2> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> CreateOrder()         {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">使用http</span>             AppContext.SetSwitch(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport</span><span style="color: rgba(128, 0, 0, 1)">"</span>,<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">);</span><span style="color: rgba(0, 0, 255, 1)">string</span> url =<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">http://localhost:5246</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">;</span><span style="color: rgba(0, 0, 255, 1)">using</span>(<span style="color: rgba(0, 0, 255, 1)">var</span> channel=<span style="color: rgba(0, 0, 0, 1)">GrpcChannel.ForAddress(url))             {</span><span style="color: rgba(0, 0, 255, 1)">var</span> client =<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> Order.OrderClient(channel);</span><span style="color: rgba(0, 0, 255, 1)">var</span> reply = client.CreateOrder(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> CreateRequest()                 {                     OrderNo</span>= DateTime.Now.ToString(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yyyMMddHHmmss</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),                     OrderName</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">冰箱22款</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,                     Price</span>=<span style="color: rgba(128, 0, 128, 1)">1688</span><span style="color: rgba(0, 0, 0, 1)">                 });                  Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">结果:{reply.Result},message:{reply.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             }             Console.ReadKey();         }</span></pre> </div> <p>比起https，前面多了一行。结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/81676af4e7b5a681eb063a6e2416a6f3.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <h2>4.IOC注入的方式调用gRPC</h2> <p>4.1、program.cs里面注入gRPCClient</p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)"> See</span><span style="color: rgba(0, 128, 0, 1); text-decoration: underline">https://aka.ms/new-console-template</span><span style="color: rgba(0, 128, 0, 1)"> for more information</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> GrpcDemo.Client;</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> GrpcDemo.Service;</span><span style="color: rgba(0, 0, 255, 1)">using</span><span style="color: rgba(0, 0, 0, 1)"> Microsoft.Extensions.DependencyInjection;  Console.WriteLine(</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">Hello, World!</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);  IServiceCollection services</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> ServiceCollection(); services.AddTransient</span>&lt;GrpcRequestTest&gt;<span style="color: rgba(0, 0, 0, 1)">();</span><span style="color: rgba(0, 0, 255, 1)">#region</span> gRPC Client注册<span style="color: rgba(255, 0, 0, 1)"> AppContext.SetSwitch("System.Net.Http.SocketsHttpHandler.Http2UnencryptedSupport", true); services.AddGrpcClient&lt;Order.OrderClient&gt;(options =&gt; {     options.Address = new Uri("http://localhost:5246"); }).ConfigureChannel(grpcOptions =&gt; {     //可以完成各种配置，比如token });</span><span style="color: rgba(0, 0, 255, 1)">#endregion</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">构建容器</span> IServiceProvider serviceProvider =<span style="color: rgba(0, 0, 0, 1)"> services.BuildServiceProvider();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">解析grpc请求测试</span><span style="color: rgba(0, 0, 255, 1)">var</span> grpcRequestTest = serviceProvider.GetService&lt;GrpcRequestTest&gt;<span style="color: rgba(0, 0, 0, 1)">();</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">执行</span> grpcRequestTest.CreateOrder();</pre> </div> <p>grpcRequestTest里代码：</p> <div class="cnblogs_code"> <pre><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> gRPC请求测试</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> GrpcRequestTest     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 0, 1)"> Order.OrderClient _orderClient;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 0, 1)"> GrpcRequestTest(Order.OrderClient orderClient)         {             _orderClient</span>=<span style="color: rgba(0, 0, 0, 1)"> orderClient;         }</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">void</span><span style="color: rgba(0, 0, 0, 1)"> CreateOrder()         {</span><span style="color: rgba(0, 0, 255, 1)">var</span> reply = _orderClient.CreateOrder(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> CreateRequest()             {                 OrderNo</span>= DateTime.Now.ToString(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yyyMMddHHmmss</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),                 OrderName</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">冰箱22款</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,                 Price</span>=<span style="color: rgba(128, 0, 128, 1)">1688</span><span style="color: rgba(0, 0, 0, 1)">             });             Console.WriteLine($</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">结果:{reply.Result},message:{reply.Message}</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">);             Console.ReadKey();         }     }</span></pre> </div> <p>结果：</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/dc4ebf7a398bf983413e52cb571057f4.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> </h1> <p>通常我们的服务有对外提供对外接口，又要对内提供gRPC服务，那怎么做呢，下面在webapi中加入gRPC服务</p> <p><strong>1.创建asp.net core mvc项目</strong></p> <p><strong>2.安装nuget包</strong></p> <div class="cnblogs_code"> <pre>Grpc.AspNetCore</pre> </div> <p><strong>3.添加protebuf文件</strong></p> <p>把上面的proto文件复制过来</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/b52d8966d2538f1fc8243cd02d7c17fe.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p><strong>4.添加Service</strong></p> <p><strong><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/6821a20fd5c8f78052e8b1a09a0d3f83.jpg" alt=".NET Core(.NET6)中gRPC使用"></strong></p> <div class="cnblogs_code"> <pre><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">class</span><span style="color: rgba(0, 0, 0, 1)"> OrderService : Order.OrderBase     {</span><span style="color: rgba(0, 0, 255, 1)">private</span><span style="color: rgba(0, 0, 255, 1)">readonly</span> ILogger&lt;OrderService&gt;<span style="color: rgba(0, 0, 0, 1)"> _logger;</span><span style="color: rgba(0, 0, 255, 1)">public</span> OrderService(ILogger&lt;OrderService&gt;<span style="color: rgba(0, 0, 0, 1)"> logger)         {             _logger</span>=<span style="color: rgba(0, 0, 0, 1)"> logger;         }</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 创建订单</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="request"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="context"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;&lt;/returns&gt;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span> Task&lt;CreateResult&gt;<span style="color: rgba(0, 0, 0, 1)"> CreateOrder(CreateRequest request, ServerCallContext context)         {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">报存数据库 todo</span><span style="color: rgba(0, 0, 255, 1)">return</span> Task.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> CreateResult             {                 Result</span>=<span style="color: rgba(0, 0, 255, 1)">true</span><span style="color: rgba(0, 0, 0, 1)">,                 Message</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">订单创建成功</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">             });         }</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(0, 128, 0, 1)"> 查询订单</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;/summary&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="request"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;param name="context"&gt;&lt;/param&gt;</span><span style="color: rgba(128, 128, 128, 1)">///</span><span style="color: rgba(128, 128, 128, 1)">&lt;returns&gt;&lt;/returns&gt;</span><span style="color: rgba(0, 0, 255, 1)">public</span><span style="color: rgba(0, 0, 255, 1)">override</span> Task&lt;QueryResult&gt;<span style="color: rgba(0, 0, 0, 1)"> QueryOrder(QueryRequest request, ServerCallContext context)         {</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">查询数据库</span><span style="color: rgba(0, 128, 0, 1)">//</span><span style="color: rgba(0, 128, 0, 1)">todo</span><span style="color: rgba(0, 0, 255, 1)">return</span> Task.FromResult(<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> QueryResult             {                 OrderInfo</span>=<span style="color: rgba(0, 0, 255, 1)">new</span><span style="color: rgba(0, 0, 0, 1)"> OrderInfo                 {                     Id</span>=<span style="color: rgba(0, 0, 0, 1)"> request.Id,                     OrderNo</span>= DateTime.Now.ToString(<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">yyyyMMddHHmmss</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">),                     OrderName</span>=<span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(128, 0, 0, 1)">冰箱</span><span style="color: rgba(128, 0, 0, 1)">"</span><span style="color: rgba(0, 0, 0, 1)">,                     Price</span>=<span style="color: rgba(128, 0, 128, 1)">1288</span><span style="color: rgba(0, 0, 0, 1)">                 }             });         }     }</span></pre> </div> <p><strong>5.注册gRPC服务</strong></p> <p>在Program.cs文件中</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/256ef37376bdc494e8c63e7ec73b3c59.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>到这里，就把gRPC加入到webapi里面了。</p> <p><strong>6.验证</strong></p> <p>启动asp.net core mvc程序</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/bf45c43a0936a55e9074e874631f31cf.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>浏览器能访问，证明&nbsp;restful api是没问题的。</p> <p>然后再用上面的客户端访问一下gRPC的服务。</p> <p><img decoding="async" src="http://img.555519.xyz/uploads3/20220510/d8962ebf2713fefc62113109da245de2.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;结果：<img decoding="async" src="http://img.555519.xyz/uploads3/20220510/499abc02be7f58baa89120ade42a8692.jpg" alt=".NET Core(.NET6)中gRPC使用"></p> <p>&nbsp;这样就成功对外提供api接口和对内提供gRPC服务了。</p> <p>源码地址：https://github.com/weixiaolong325/GrpcDemo.Service</p> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-79033.htm">长沙宠物领养中心在哪儿（长沙宠物狗领养中心）</a></p>
                                        <p>下一个：<a href="/news/article-79713.htm">mysql数据库锁MDL锁的解释_在线工具</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h3 class="panel-title">热门文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                                    <li class="py-2"><a href="/free-nodes/2024-5-8-clash-v2ray-ss-ssr.htm" title="5月8日|最高速度22.5M/S，2024最新Shadowrocket/Clash/SSR/V2ray免费节点高速订阅链接">5月8日|最高速度22.5M/S，2024最新Shadowrocket/Clash/SSR/V2ray免费节点高速订阅链接</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
                <!-- Start of Footer Area -->
        <footer id="footer" class="footer-area footer-bg">
            <div class="footer-bottom-area">
                <div class="container">
                    <div class="row">
                        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                            <div class="copy-right-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                NodeClashV2ray节点订阅站 版权所有 Powered by WordPress
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!--End of Footer Area -->
    </div>
    <!-- Body main wrapper end -->
    <!-- Placed js at the end of the document so the pages load faster -->
    <!-- jquery latest version -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/vendor/jquery-1.12.0.min.js"></script>
    <!-- Bootstrap framework js -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/bootstrap.min.js"></script>
    <!-- Owl Carousel framework js -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/owl.carousel.min.js"></script>
    <!-- All js plugins included in this file. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/plugins.js"></script>
    <!-- Slick min.js. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/slick.min.js"></script>
    <!-- Waypoints.min.js. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/waypoints.min.js"></script>
    <!-- Main js file that contents all jQuery plugins activation. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>