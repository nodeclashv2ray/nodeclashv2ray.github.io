<!doctype html>
<html xml:lang="zh-CN" lang="zh-CN">

<head>
        <link rel="canonical" href="https://nodeclashv2ray.github.io/news/article-58455.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>19-Spring AOP源码分析-代理对象调用目标方法</title>
        <meta name="description" content="1-Spring架构源码分析-Spring源码搭建 2-Spring架构源码分析-SSM框架说明 3-Spring架构源码分析-spring体系 4-Spring架构源码分析-Spring IOC机制" />
        <link rel="icon" href="/assets/website/img/nodeclashv2ray/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="NodeClashV2ray节点订阅站">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://nodeclashv2ray.github.io/news/article-58455.htm" />
    <meta property="og:site_name" content="NodeClashV2ray节点订阅站" />
    <meta property="og:title" content="19-Spring AOP源码分析-代理对象调用目标方法" />
    <meta property="og:image" content="https://nodeclashv2ray.github.io/uploads/20240509/e593eb6fd5365c2c99de8d7f1709f6ec.webp" />
        <meta property="og:release_date" content="2025-02-18T00:36:20" />
    <meta property="og:updated_time" content="2025-02-18T00:36:20" />
        <meta property="og:description" content="1-Spring架构源码分析-Spring源码搭建 2-Spring架构源码分析-SSM框架说明 3-Spring架构源码分析-spring体系 4-Spring架构源码分析-Spring IOC机制" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no">
    <!-- Place favicon.ico in the root directory -->
    <!-- All css files are included here. -->

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="19-Spring AOP源码分析-代理对象调用目标方法">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- Bootstrap fremwork main css -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/bootstrap.min.css">
    <!-- This core.css file contents all plugings css file. -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/core.css">
    <!-- Theme shortcodes/elements style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/shortcode/shortcodes.css">
    <!-- Theme main style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/style.css">
    <!-- Responsive css -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/responsive.css">
    <!-- Style customizer (Remove these two lines please) -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/style-customizer.css">
    <!-- User style -->
    <link rel="stylesheet" href="/assets/website/css/nodeclashv2ray/custom.css">
    <!-- Modernizr JS -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/vendor/modernizr-2.8.3.min.js"></script>
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-BKWDB6T1Z4"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-BKWDB6T1Z4');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
    <!--[if lt IE 8]>
        <p class="browserupgrade">You are using an <strong>outdated</strong> browser. Please <a href="http://browsehappy.com/">upgrade your browser</a> to improve your experience.</p>
    <![endif]-->
    <!-- Body main wrapper start -->
    <div class="wrapper">
        <!-- Start of Header Top Area -->
        <header id="header-content">
            <!-- Start of mainmenu area -->
            <div id="sticky-header-with-topbar" class="header-bottom-area bg-white height-100  transparent-header hidden-xs">
                <div class="container">
                    <div class="row">
                        <div class="col-md-5 col-sm-12">
                            <div class="logo f-left sm-center">
                                <a href="/">
                                                                <span>Node Clash V2ray</span>
                                                                </a>
                            </div>
                        </div>
                        <div class="col-md-7 col-sm-12">
                            <div class="mainmenu-container">
                                <ul class="main-menu">
                                                                        <li><a href="/">首页</a></li>
                                                                        <li><a href="/free-nodes/">免费节点</a></li>
                                                                        <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                        <li><a href="/client.htm">客户端</a></li>
                                                                        <li><a href="/news/">新闻资讯</a></li>
                                                                    </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <!-- Mobile-menu-area start -->
            <div class="mobile-menu-area hidden-md hidden-lg hidden-sm">
                <div class="fluid-container mobile-menu-container">
                    <div class="mobile-logo">
                                                <a href="/">Node Clash V2ray</a>
                                            </div>
                    <div class="mobile-menu clearfix">
                        <nav id="mobile_dropdown">
                            <ul>
                                                                <li><a href="/">首页</a></li>
                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                <li><a href="/client.htm">客户端</a></li>
                                                                <li><a href="/news/">新闻资讯</a></li>
                                                            </ul>
                        </nav>
                    </div>
                </div>
            </div>
            <!-- Mobile-menu-area end -->
        </header>
<!-- End of Header Top Area -->
        <!-- Start Bradcaump area -->
        <div class="tf-bradcaump-area sbg-3" data-black-overlay="8">
            <div class="container">
                <div class="row">
                    <div class="col-xs-12">
                        <div class="bradcaump-wrap text-center">
                            <h1 class="bradcaump-title">19-Spring AOP源码分析-代理对象调用目标方法</h1>
                            <nav class="bradcaump-inner">
                                <a class="breadcrumb-item" href="/">首页</a>
                                <span class="brd-separetor">/</span>
                                <a class="breadcrumb-item" href="/news/">新闻资讯</a>
                                <span class="brd-separetor">/</span>
                                <span class="breadcrumb-item active">正文</span>
                            </nav>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <!-- End Bradcaump area -->
        <section id="tf-about-container" class="tf-about-area ptb-100 bg-gray xtb-60">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="" data-url="">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> </h1> <ol> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125924521"  rel="nofollow">1-Spring架构源码分析-Spring源码搭建</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125967417"  rel="nofollow">2-Spring架构源码分析-SSM框架说明</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125984425"  rel="nofollow">3-Spring架构源码分析-spring体系</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/125984529"  rel="nofollow">4-Spring架构源码分析-Spring IOC机制设计思想和源码解读</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126006722"  rel="nofollow">5-Spring架构源码分析-Spring IOC之 Spring 统一资源加载策略</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126023517"  rel="nofollow">6-Spring架构源码分析-IoC 之加载 BeanDefinition</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126065441"  rel="nofollow">7-Spring架构源码分析-IoC 之注册 BeanDefinitions</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126339548"  rel="nofollow">8-Spring架构源码分析-IoC 之解析Bean：解析 import 标签</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126339562"  rel="nofollow">9-Spring架构源码分析-IoC 之解析 bean 标签：开启解析进程</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126358220"  rel="nofollow">10-Spring架构源码分析-IoC 之解析 bean标签：BeanDefinition</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126358236"  rel="nofollow">11-Spring架构源码分析-IoC 之注册解析的 BeanDefinitions</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126396450"  rel="nofollow">12-Spring架构源码分析-IoC 之装载 BeanDefinitions 总结</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126396493"  rel="nofollow">13-Spring架构源码分析-IoC 之开启 Bean 的加载</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126474215"  rel="nofollow">14-Spring架构源码分析-IoC 之加载 Bean：总结</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126496936"  rel="nofollow">15-Spring架构源码分析-Spring代理与AOP</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126497008"  rel="nofollow">16-Spring AOP源码分析-@EnableAspectJAutoProxy和AspectJAutoProxyRegistrar</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126497019"  rel="nofollow">17-Spring AOP源码分析-AnnotationAwareAspectJAutoProxyCreator</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126497035"  rel="nofollow">18-Spring AOP源码分析-AOP与BeanPostProcessor处理器</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126516950"  rel="nofollow">19-Spring AOP源码分析-代理对象调用目标方法</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126595980"  rel="nofollow">20-spring mvc设计思想和源码解读-spring mvc 功能特性</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126654411"  rel="nofollow">21-mvc 体系结构源码详解</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126654419"  rel="nofollow">22-Spring MVC源码跟踪</a></li> <li><a href="http://www.m6000.cn/wp-content/themes/begin%20lts/inc/go.php?url=https://blog.csdn.net/xianghanscce/article/details/126654422"  rel="nofollow">23-Spring事务源码分析</a></li> </ol> <h5> <a id="_25" rel="nofollow"></a>代理对象调用目标方法</h5> <p><strong>背景知识:</strong></p> <p><strong>@EnableAspectJAutoProxy(exposeProxy = true)﻿ 这个东东是用来干什么的？</strong></p> <p><strong>没有配置exposeProxy 暴露代理对象的时候我们方法调用</strong></p> <p><strong>我们在Mod方法中 通过this来调用本类的方法add()方法的时候，发现add()的方法不会被拦截</strong></p> <p><strong>而我们配置了后exposeProxy的属性，我们发现可以通过</strong></p> <p>**int retVal = ((Calculate) AopContext.currentProxy()).add(numA,numB);</p> <p>**</p> <p><strong>调用的时候，发现了add()方法可以被拦截</strong></p> <p><strong>原理:把这个exposeProxy设置为true，会把代理对象存放在线程变量中,</strong></p> <p><strong>AopContext.currentProxy())是从线程变量中获取代理对象（源码中分析）</strong></p> <p><strong>应用场景(事物方法调用事物方法需要二个都起作用需要配置这个东东)</strong></p> <pre><code class="prism language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Calculate</span> <span class="token punctuation">{<!-- --></span>      <span class="token comment">/**      * 加法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 减法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 除法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">/**      * 乘法      * @param numA      * @param numB      * @return      */</span>      <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TulingCalculate</span> <span class="token keyword">implements</span> <span class="token class-name">Calculate</span> <span class="token punctuation">{<!-- --></span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>          <span class="token keyword">return</span> numA<span class="token operator">+</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">-</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">/</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multi</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span> <span class="token keyword">int</span> numB<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>         <span class="token keyword">return</span> numA<span class="token operator">*</span>numB<span class="token punctuation">;</span>     <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">mod</span><span class="token punctuation">(</span><span class="token keyword">int</span> numA<span class="token punctuation">,</span><span class="token keyword">int</span> numB<span class="token punctuation">)</span><span class="token punctuation">{<!-- --></span>         <span class="token keyword">int</span> retVal <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Calculate</span><span class="token punctuation">)</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">currentProxy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>numA<span class="token punctuation">,</span>numB<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//int retVal = this.add(numA,numB);</span>         <span class="token keyword">return</span> retVal<span class="token operator">%</span>numA<span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> </code></pre> <p><em><strong>*代理对象调用源代码:*</strong></em></p> <pre><code class="prism language-java">	<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{<!-- --></span> 		<span class="token class-name">MethodInvocation</span> invocation<span class="token punctuation">;</span> 		<span class="token class-name">Object</span> oldProxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 		<span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  		<span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>targetSource<span class="token punctuation">;</span> 		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> 		<span class="token class-name">Object</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  		<span class="token keyword">try</span> <span class="token punctuation">{<!-- --></span> 		   			<span class="token class-name">Object</span> retVal<span class="token punctuation">;</span>                          <span class="token comment">//是否暴露代理对象</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//把代理对象添加到TheadLocal中</span> 				oldProxy <span class="token operator">=</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span> 				setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>              <span class="token comment">//获取被代理对象</span> 			target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			    <span class="token comment">//设置被代理对象的class</span> 				targetClass <span class="token operator">=</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>  			<span class="token comment">//把增强器转为方法拦截器链</span> 			<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  		    <span class="token comment">//若方法拦截器链为空</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>                 <span class="token comment">//通过反射直接调用目标方法</span> 				<span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span> 				retVal <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//创建方法拦截器调用链条</span> 				invocation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectiveMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token comment">//执行拦截器链</span> 				retVal <span class="token operator">=</span> invocation<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span>  			<span class="token comment">//获取方法的返回值类型</span> 			<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> returnType <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">getReturnType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> retVal <span class="token operator">==</span> target <span class="token operator">&amp;&amp;</span> 					returnType <span class="token operator">!=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isInstance</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> 					<span class="token operator">!</span><span class="token class-name">RawTargetAccess</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//如果方法返回值为 this，即 return this; 则将代理对象 proxy 赋值给 retVal </span> 				retVal <span class="token operator">=</span> proxy<span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token comment">//如果返回值类型为基础类型，比如 int，long 等，当返回值为 null，抛出异常</span> 			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>retVal <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> returnType <span class="token operator">!=</span> <span class="token class-name">Void</span><span class="token punctuation">.</span>TYPE <span class="token operator">&amp;&amp;</span> returnType<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span> 						<span class="token string">"Null return value from advice does not match primitive return type for: "</span> <span class="token operator">+</span> method<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">return</span> retVal<span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">finally</span> <span class="token punctuation">{<!-- --></span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">// Must have come from TargetSource.</span> 				targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">// Restore old proxy.</span> 				<span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span> 	<span class="token punctuation">}</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>AdvisedSupport</span>#getInterceptorsAndDynamicInterceptionAdvice<span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span> 把增强器中转为方法拦截器链 	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		<span class="token comment">//从缓存中获取缓存key 第一次肯定获取不到</span> 		<span class="token class-name">MethodCacheKey</span> cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token comment">//通过cacheKey获取缓存值</span> 		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		<span class="token comment">//从缓存中没有获取到</span> 		<span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 		    <span class="token comment">//获取所有的拦截器</span> 			cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorChainFactory<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span> 					<span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span> 		    <span class="token comment">//放入缓存.....</span> 			<span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token punctuation">}</span> 		<span class="token keyword">return</span> cached<span class="token punctuation">;</span> 	<span class="token punctuation">}</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">=</span><span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>aop<span class="token punctuation">.</span>framework<span class="token punctuation">.</span></span>AdvisorChainFactory</span>#getInterceptorsAndDynamicInterceptionAdvice<span class="token operator">==</span><span class="token operator">==</span> 	<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span> 			<span class="token class-name">Advised</span> config<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span>  	    <span class="token comment">//创建拦截器集合长度是增强器的长度</span> 		<span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> interceptorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span> 		 		<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> actualClass <span class="token operator">=</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> targetClass <span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token keyword">boolean</span> hasIntroductions <span class="token operator">=</span> <span class="token function">hasMatchingIntroductions</span><span class="token punctuation">(</span>config<span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">;</span> 		<span class="token class-name">AdvisorAdapterRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">GlobalAdvisorAdapterRegistry</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//遍历所有的增强器集合</span> 		<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Advisor</span> advisor <span class="token operator">:</span> config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 			<span class="token comment">//判断增强器是不是PointcutAdvisor</span> 			<span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token comment">//把增强器转为PointcutAdvisor</span> 				<span class="token class-name">PointcutAdvisor</span> pointcutAdvisor <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">PointcutAdvisor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">;</span> 				<span class="token comment">//通过方法匹配器对增强器进行匹配</span> 				<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					<span class="token class-name">MethodMatcher</span> mm <span class="token operator">=</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 					<span class="token comment">//能够匹配</span> 					<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MethodMatchers</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>mm<span class="token punctuation">,</span> method<span class="token punctuation">,</span> actualClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 						<span class="token comment">//把增强器转为拦截器</span> 						<span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 						<span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">isRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 							<span class="token comment">// Creating a new object instance in the getInterceptors() method</span> 							<span class="token comment">// isn't a problem as we normally cache created chains.</span> 							<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span> interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 								interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">,</span> mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 							<span class="token punctuation">}</span> 						<span class="token punctuation">}</span> 						<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 							interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 						<span class="token punctuation">}</span> 					<span class="token punctuation">}</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 				<span class="token class-name">IntroductionAdvisor</span> ia <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">IntroductionAdvisor</span><span class="token punctuation">)</span> advisor<span class="token punctuation">;</span> 				<span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> ia<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{<!-- --></span> 					<span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 					interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 				<span class="token punctuation">}</span> 			<span class="token punctuation">}</span> 			<span class="token keyword">else</span> <span class="token punctuation">{<!-- --></span> 				<span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span> 				interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 			<span class="token punctuation">}</span> 		<span class="token punctuation">}</span>  		<span class="token keyword">return</span> interceptorList<span class="token punctuation">;</span> 	<span class="token punctuation">}</span> </code></pre> <p>------------------------------------------------------------ 完 --------------------------------------------------------------------</p> <p><strong>背景知识:</strong></p> <p><strong>@EnableAspectJAutoProxy(exposeProxy = true)﻿ 这个东东是用来干什么的？</strong></p> <p><strong>没有配置exposeProxy 暴露代理对象的时候我们方法调用</strong></p> <p><strong>我们在Mod方法中 通过this来调用本类的方法add()方法的时候，发现add()的方法不会被拦截</strong></p> <p><strong>而我们配置了后exposeProxy的属性，我们发现可以通过</strong></p> <p>**int retVal = ((Calculate) AopContext.currentProxy()).add(numA,numB);</p> <p>**</p> <p><strong>调用的时候，发现了add()方法可以被拦截</strong></p> <p><strong>原理:把这个exposeProxy设置为true，会把代理对象存放在线程变量中,</strong></p> <p><strong>AopContext.currentProxy())是从线程变量中获取代理对象（源码中分析）</strong></p> <p><strong>应用场景(事物方法调用事物方法需要二个都起作用需要配置这个东东)</strong></p> <ol> </ol> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-58084.htm">python 调用 C/C++ 详解</a></p>
                                        <p>下一个：<a href="/news/article-58456.htm">动物医院职位 动物医院职位名称</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
                            <div class="panel-heading">
                                <h3 class="panel-title">热门文章</h3>
                            </div>
                            <div class="panel-body">
                                <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                                    <li class="py-2"><a href="/free-nodes/2024-5-8-clash-v2ray-ss-ssr.htm" title="5月8日|最高速度22.5M/S，2024最新Shadowrocket/Clash/SSR/V2ray免费节点高速订阅链接">5月8日|最高速度22.5M/S，2024最新Shadowrocket/Clash/SSR/V2ray免费节点高速订阅链接</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
                <!-- Start of Footer Area -->
        <footer id="footer" class="footer-area footer-bg">
            <div class="footer-bottom-area">
                <div class="container">
                    <div class="row">
                        <div class="col-xs-12 col-sm-6 col-md-6 col-lg-6">
                            <div class="copy-right-text">
                            <p>
                                <a href="/">首页</a> | 
                                <a href="/free-node/">免费节点</a> | 
                                <a href="/news/">新闻资讯</a> |
                                <a href="/about-us.htm">关于我们</a> |
                                <a href="/disclaimer.htm">免责申明</a> |
                                <a href="/privacy.htm">隐私申明</a> |
                                <a href="/sitemap.xml">网站地图</a>
                            </p>
                                NodeClashV2ray节点订阅站 版权所有 Powered by WordPress
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!--End of Footer Area -->
    </div>
    <!-- Body main wrapper end -->
    <!-- Placed js at the end of the document so the pages load faster -->
    <!-- jquery latest version -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/vendor/jquery-1.12.0.min.js"></script>
    <!-- Bootstrap framework js -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/bootstrap.min.js"></script>
    <!-- Owl Carousel framework js -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/owl.carousel.min.js"></script>
    <!-- All js plugins included in this file. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/plugins.js"></script>
    <!-- Slick min.js. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/slick.min.js"></script>
    <!-- Waypoints.min.js. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/waypoints.min.js"></script>
    <!-- Main js file that contents all jQuery plugins activation. -->
    <script src="/assets/website/js/frontend/nodeclashv2ray/main.js"></script>
    <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script><script src="/assets/website/js/frontend/G.js"></script>
</body>

</html>